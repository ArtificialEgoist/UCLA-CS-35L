1.) Since the whole point of SSH is to provide secure network communication, even if the bytes sent were compromised, the other team would only see encrypted data. The encrypted data is essentially garbage without the private key to decrypt it, so the network is actually secure. On the other hand, if our keyboards were tapped and our team was being keylogged, our password to access the servers or our passphrases could very well be compromised. In addition, if the hackers got access to our client computer, they have access to all our keys and files. Being keylogged makes the network unsecure. In the same way, a physically compromised USB that we depend on to boot would very well screw up our network security again. The other team could utilize that USB to cut our boot-up short and take our files and passcodes, making our secure communication efforts useless.

2.) The gpg --verify command, according to some extra search and gpg's man pages, apparently only checks whether the signature file corresponds to the source file and that signing key. It doesn't necessarily check that we made the tar file in question. (In detached signatures, the signature is verified based on both the document and detached signature. But gpg might not have access to that document due to security measures.) One alternative is to use audit package commands to see whether the tar file is truly created and last modified by the user in question. Then we can use verify and gpg commands to check for the signature.
